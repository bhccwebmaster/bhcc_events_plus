<?php

use Drupal\node\NodeInterface;
use Drupal\node\Entity\Node;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\bhcc_events_plus\EventsExtraFieldDisplay;
use Drupal\Core\Form\FormStateInterface;
use Drupal\pathauto\Entity\PathautoPattern;

/**
 * Implements hook_theme().
 */
function bhcc_events_plus_theme() {
  return [
    'bhcc_events_facets' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_views_data_alter().
 */
function bhcc_events_plus_views_data_alter(array &$data) {
  $data['node_field_data']['bhcc_localgov_facets'] = [
    'title' => t('Event Facets'),
    'filter' => array(
      'label' => t('Event Facets'),
      'field' => 'localgov_directory_facets_select',
      'id' => 'bhcc_localgov_facets'
    )
  ];
}

/**
 * Implements hook_entity_extra_field_info().
 */
function bhcc_events_plus_entity_extra_field_info() {
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EventsExtraFieldDisplay::class)
    ->entityExtraFieldInfo();
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function bhcc_events_plus_node_view(array &$build, NodeInterface $node, EntityViewDisplayInterface $display, $view_mode) {
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EventsExtraFieldDisplay::class)
    ->nodeView($build, $node, $display, $view_mode);
}

/**
 * Implements hook_pathauto_pattern_alter().
 */
function bhcc_events_plus_pathauto_pattern_alter(PathautoPattern $pattern, array $context) {

  $entity = reset($context['data']);
  if ($entity instanceof NodeInterface) {

    // Due to events not always having a channel,
    // add the pattern for indivudual events here to be aliased with
    // their parent event channel.
    // Based on Localgov Services Navigation path alter.
    // @see LocalgovDrupal services navigation module.
    if ($entity->bundle() === 'localgov_event' && $entity->hasField('bhcc_event_channel') && !empty($target_id = $entity->get('bhcc_event_channel')->target_id) && strpos($pattern->getPattern(), '[node:bhcc_event_channel:0:entity:url:relative]') === FALSE) {
      
      // Only set the path if the channel node exists.
      // This is to avoid events using the /[node:title] pattern.
      $channel_nids = \Drupal::entityTypeManager()->getStorage('node')->getQuery()->condition('nid', $target_id)->execute();
      if (!empty($channel_nids)) {
        $pattern->setPattern('[node:bhcc_event_channel:0:entity:url:relative]/[node:title]');
      }
    }
  }
}

/**
 * Implements hook_module_implements_alter
 */
function bhcc_events_plus_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_views_exposed_form_alter') {
    // Move bhcc events plus to last hook
    unset($implementations['bhcc_events_plus']);
    $implementations['bhcc_events_plus'] = NULL;
  }
}

/**
 * Implements hook_form_views_exposed_form_alter().
 */
function bhcc_events_plus_form_views_exposed_form_alter(&$form, FormStateInterface $form_state) {

  // Modifiying the views exposed filter form.
  // Required to use an after build as 
  // localgov_events needs to add the date picker.
  if ($form['#id'] == 'views-exposed-form-localgov-events-listing-page-all-events') {
    $form['#after_build'][] = '_bhcc_events_plus_localgov_events_listing_after_build';
  }
}

function _bhcc_events_plus_localgov_events_listing_after_build($form, FormStateInterface &$form_state) {

  // If this is an events node, and it has a channel,
  // direct the search to search in channel.
  $route_match = \Drupal::routeMatch();
  if ($route_match->getParameters()->has('node') && $node = $route_match->getParameter('node')) {
    if (!$node instanceof NodeInterface) {
      $node = Node::load((int) $node);
    }

    // Set a default value of NULL for the channel node.
    $channel_node = NULL;

    // Channel node.
    if ($node->bundle() == 'event_channel') {
      $form['#action'] = $node->toUrl()->toString();
      $channel_node = $node;
    }

    // Event node.
    if ($node->hasField('bhcc_event_channel') && $target_id = $node->bhcc_event_channel->target_id) {
      $channel_node = Node::load($target_id);
      if ($channel_node instanceof NodeInterface) {
        $form['#action'] = $channel_node->toUrl()->toString();
      }
    }

    // Filter facets.
    if ($channel_node instanceof NodeInterface && !empty($form['bhcc_facets'])) {

      // Get the facet types that are enabled.
      $facet_types = $channel_node->get('localgov_directory_facets_enable')->getValue();

      // If facets found, filter out unrequired facets here.
      if (!empty($facet_types[0]['target_id'])) {
        $facet_types = array_column($facet_types, 'target_id');
        $form['bhcc_facets'] = array_filter($form['bhcc_facets'], function($key) use($facet_types) {

          // Don't filter special keys.
          if (substr($key, 0, 1) == '#') {
            return TRUE;
          }

          // Check if is in facet array.
          return in_array(substr($key, 6), $facet_types) ? TRUE : FALSE;
        }, ARRAY_FILTER_USE_KEY);
      } else {
        // Remove all facets if none set.
        unset($form['bhcc_facets']);
      }
    } else {
      // Remove facets if not a channel node.
      unset($form['bhcc_facets']);
    }
  } else {
    // Remove facets if no channel node.
    unset($form['bhcc_facets']);
  }

  // Seperate the filters in own container.
  $form['bhcc_exposed_filters'] = [
    '#type' => 'container',
    '#weight' => 0,
    // @todo change to theme so can be controlled with cusotm twig.
    '#attributes' => [
      'class' => ['card', 'default-shadow'],
    ],
  ];

  $preserved_keys = [
    'form_build_id',
    'form_id',
    'form_token',
    'bhcc_exposed_filters',
    'bhcc_facets',
  ];

  $form_elements = array_keys($form);
  foreach($form_elements as $key) {
    if (strpos($key, '#') !== 0 && !in_array($key, $preserved_keys)) {
      $form['bhcc_exposed_filters'][$key] = $form[$key];
      unset($form[$key]);
    }
  }

  // Set the title and description from form info.
  // This gets removed when in a container.
  foreach($form['#info'] as $info_key => $form_info) {
    $filter_key = $form_info['value'];
    if (!empty($form['bhcc_exposed_filters'][$filter_key])) {
      $form['bhcc_exposed_filters'][$filter_key]['#title'] = $form_info['label'];
      $form['bhcc_exposed_filters'][$filter_key]['#description'] = $form_info['description'];
    }
  }

  // Add the autosubmit js.
  $form['#attached']['library'][] = 'bhcc_events_plus/facet_auto_submit';

  // If proximity filter exists.
  if (!empty($form['bhcc_exposed_filters']['proximity_wrapper']['proximity'])) {

    $form['bhcc_exposed_filters']['proximity'] = $form['bhcc_exposed_filters']['proximity_wrapper']['proximity'];
    $title = $form['bhcc_exposed_filters']['proximity_wrapper']['#title'];
    unset($form['bhcc_exposed_filters']['proximity_wrapper']);

    // Set as a container, not a fieldset.
    $form['bhcc_exposed_filters']['proximity']['#type'] = 'container';

    // Hide the distance filter.
    // Should be ok to unset completley as assumed by view if not present.
    unset($form['bhcc_exposed_filters']['proximity']['value']);

    // Remove the description and summary.
    unset($form['bhcc_exposed_filters']['proximity']['source_configuration']['origin_address']['#description']);
    unset($form['bhcc_exposed_filters']['proximity']['exposed_summary']);

    // Change the field title to the set title in views.
    $form['bhcc_exposed_filters']['proximity']['source_configuration']['origin_address']['#title'] = $title;

    // Set the weights.
    $form['bhcc_exposed_filters']['proximity']['#weight'] = -40;
    if (!empty($form['bhcc_exposed_filters']['search'])) {
      $form['bhcc_exposed_filters']['search']['#weight'] = -50;
    }
  }
  
  return $form;
}