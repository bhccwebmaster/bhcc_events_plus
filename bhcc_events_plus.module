<?php

/**
 * @file
 * Contains bhcc_events_plus module file.
 */

use Drupal\node\NodeInterface;
use Drupal\node\Entity\Node;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\bhcc_events_plus\EventsExtraFieldDisplay;
use Drupal\Core\Form\FormStateInterface;
use Drupal\pathauto\Entity\PathautoPattern;

/**
 * Implements hook_theme().
 */
function bhcc_events_plus_theme() {
  return [
    'bhcc_events_facets' => [
      'render element' => 'elements',
    ],
    'date_recur_next_date' => [
      'variables' => [
        'date' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_views_data_alter().
 */
function bhcc_events_plus_views_data_alter(array &$data) {
  $data['node_field_data']['bhcc_localgov_facets'] = [
    'title' => t('Event Facets'),
    'filter' => [
      'label' => t('Event Facets'),
      'field' => 'localgov_directory_facets_select',
      'id' => 'bhcc_localgov_facets',
    ],
  ];
}

/**
 * Implements hook_entity_extra_field_info().
 */
function bhcc_events_plus_entity_extra_field_info() {
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EventsExtraFieldDisplay::class)
    ->entityExtraFieldInfo();
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function bhcc_events_plus_node_view(array &$build, NodeInterface $node, EntityViewDisplayInterface $display, $view_mode) {
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(EventsExtraFieldDisplay::class)
    ->nodeView($build, $node, $display, $view_mode);
}

/**
 * Implements hook_pathauto_pattern_alter().
 */
function bhcc_events_plus_pathauto_pattern_alter(PathautoPattern $pattern, array $context) {

  $entity = reset($context['data']);
  if ($entity instanceof NodeInterface) {

    // Due to events not always having a channel,
    // add the pattern for indivudual events here to be aliased with
    // their parent event channel.
    // Based on Localgov Services Navigation path alter.
    // @see LocalgovDrupal services navigation module.
    if ($entity->bundle() === 'localgov_event' && $entity->hasField('bhcc_event_channel') && !empty($target_id = $entity->get('bhcc_event_channel')->target_id) && strpos($pattern->getPattern(), '[node:bhcc_event_channel:0:entity:url:relative]') === FALSE) {

      // Only set the path if the channel node exists.
      // This is to avoid events using the /[node:title] pattern.
      $channel_nids = \Drupal::entityTypeManager()->getStorage('node')->getQuery()->condition('nid', $target_id)->execute();
      if (!empty($channel_nids)) {
        $pattern->setPattern('[node:bhcc_event_channel:0:entity:url:relative]/[node:title]');
      }
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function bhcc_events_plus_node_presave(NodeInterface $node) {
  if ($node->bundle() === 'localgov_event') {

    // If the no date field has a value, set a forever date.
    // This is so event date views still work.
    if ($node->hasField('bhcc_event_no_date') && ($node->bhcc_event_no_date->value)) {
      $date_arr = [
        'value' => date('Y-m-d\TH:i:s', strtotime('2000-01-01 0:00:00')),
        'end_value' => date('Y-m-d\TH:i:s', strtotime('2099-12-31 23:59:59')),
        'timezone' => 'Europe/London',
      ];
      $node->set('localgov_event_date', $date_arr);
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function bhcc_events_plus_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' || $hook == 'form_views_exposed_form_alter') {
    // Move bhcc events plus to last hook.
    unset($implementations['bhcc_events_plus']);
    $implementations['bhcc_events_plus'] = NULL;
  }
}

/**
 * Implements hook_form_alter().
 */
function bhcc_events_plus_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  $form_ids = ['node_localgov_event_form', 'node_localgov_event_edit_form'];
  if (in_array($form_id, $form_ids)) {

    // Add end venue checkbox.
    $end_venue_element = $form['bhcc_end_venue']['widget'][0]['target_id'];
    $end_venue_has_value = (!empty($end_venue_element['#value']) || !empty($end_venue_element['#default_value']) ? TRUE : FALSE);
    $form['end_venue_checkbox'] = [
      '#type' => 'checkbox',
      '#title' => t('Add a seperate end venue'),
      '#default_value' => $end_venue_has_value,
    ];

    $end_form = [
      '#prefix' => '<div class="js-bhcc-event-end">',
      '#suffix' => '</div>',
      '#states' => [
        'visible' => [
          ':input[name="end_venue_checkbox"]' => ['checked' => TRUE],
        ],
      ],
    ];

    $form['bhcc_end_venue'] += $end_form;
  }
}

/**
 * Implements hook_form_views_exposed_form_alter().
 */
function bhcc_events_plus_form_views_exposed_form_alter(&$form, FormStateInterface $form_state) {

  // Modifiying the views exposed filter form.
  // Required to use an after build as
  // localgov_events needs to add the date picker.
  if ($form['#id'] == 'views-exposed-form-localgov-events-listing-page-all-events') {
    $form['#after_build'][] = '_bhcc_events_plus_localgov_events_listing_after_build';
  }
}

/**
 * Custom afterbuild to set up the event exposed form.
 *
 * Occurs after localgov_events modifications.
 *
 * @param array $form
 *   Form array.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   Forms state.
 *
 * @return array
 *   Modified form array.
 */
function _bhcc_events_plus_localgov_events_listing_after_build(array $form, FormStateInterface &$form_state) {

  // If this is an events node, and it has a channel,
  // direct the search to search in channel.
  $route_match = \Drupal::routeMatch();
  if ($route_match->getParameters()->has('node') && $node = $route_match->getParameter('node')) {
    if (!$node instanceof NodeInterface) {
      $node = Node::load((int) $node);
    }

    // Set a default value of NULL for the channel node.
    $channel_node = NULL;

    // Channel node.
    if ($node->bundle() == 'event_channel') {
      $form['#action'] = $node->toUrl()->toString();
      $channel_node = $node;
    }

    // Event node.
    if ($node->hasField('bhcc_event_channel') && $target_id = $node->bhcc_event_channel->target_id) {
      $channel_node = Node::load($target_id);
      if ($channel_node instanceof NodeInterface) {
        $form['#action'] = $channel_node->toUrl()->toString();
      }
    }

    // Filter facets.
    if ($channel_node instanceof NodeInterface && !empty($form['bhcc_facets'])) {

      // Get the facet types that are enabled.
      $facet_types = $channel_node->get('localgov_directory_facets_enable')->getValue();

      // If facets found, filter out unrequired facets here.
      if (!empty($facet_types[0]['target_id'])) {
        $facet_types = array_column($facet_types, 'target_id');
        $form['bhcc_facets'] = array_filter($form['bhcc_facets'], function ($key) use ($facet_types) {

          // Don't filter special keys.
          if (substr($key, 0, 1) == '#') {
            return TRUE;
          }

          // Check if is in facet array.
          return in_array(substr($key, 6), $facet_types) ? TRUE : FALSE;
        }, ARRAY_FILTER_USE_KEY);

        // Filter out facets that have no nodes.
        foreach($form['bhcc_facets'] as $key => $value) {

          // Skip over special keys.
          if (substr($key, 0, 1) == '#') {
            continue;
          }

          // Perform filter options.
          if (!empty($value['#options'])) {
            $form['bhcc_facets'][$key]['#options'] = array_filter($value['#options'], function($facet_id) use ($channel_node) {
              // do entity query to see if there are any results
              $query = \Drupal::entityQuery('node');
              $query->condition('type', 'localgov_event');
              $query->condition('bhcc_event_channel.entity.nid', $channel_node->id());
              $query->condition('localgov_directory_facets_select.entity.id', $facet_id);

              // include only those with published moderation state
              // $query->condition('moderation_state', 'published');

              $results = $query->execute();
              return !empty($results) ? TRUE : FALSE;
            }, ARRAY_FILTER_USE_KEY);

            // Additional Filter to remove the option from display.
            $form['bhcc_facets'][$key] = array_filter($form['bhcc_facets'][$key], function($facet_id) use ($form, $key) {
              
              // Only filter the numeric keys that correspond to options.
              if (!is_numeric($facet_id)) {
                return TRUE;
              }

              // Check if it is a valid option.
              if (isset($form['bhcc_facets'][$key]['#options'][$facet_id])) {
                return TRUE;
              }
              return FALSE;
            }, ARRAY_FILTER_USE_KEY);
          }

          // If no options, then remove the facet.
          if (empty($form['bhcc_facets'][$key]['#options'])) {
            unset($form['bhcc_facets'][$key]);
          }
        }
      }
      else {
        // Remove all facets if none set.
        _bhcc_events_plus_localgov_events_listing_hide_facets($form);
      }
    }
    else {
      // Remove facets if not a channel node.
      _bhcc_events_plus_localgov_events_listing_hide_facets($form);
    }
  }
  else {
    // Remove facets if no channel node.
    _bhcc_events_plus_localgov_events_listing_hide_facets($form);
  }

  // Seperate the filters in own container.
  $form['bhcc_exposed_filters'] = [
    '#type' => 'container',
    '#weight' => 0,
    // @todo change to theme so can be controlled with cusotm twig.
    '#attributes' => [
      'class' => ['card', 'default-shadow'],
    ],
  ];

  $preserved_keys = [
    'form_build_id',
    'form_id',
    'form_token',
    'bhcc_exposed_filters',
    'bhcc_facets',
  ];

  $form_elements = array_keys($form);
  foreach ($form_elements as $key) {
    if (strpos($key, '#') !== 0 && !in_array($key, $preserved_keys)) {
      $form['bhcc_exposed_filters'][$key] = $form[$key];
      unset($form[$key]);
    }
  }

  // Set the title and description from form info.
  // This gets removed when in a container.
  foreach ($form['#info'] as $form_info) {
    $filter_key = $form_info['value'];
    if (!empty($form['bhcc_exposed_filters'][$filter_key])) {
      $form['bhcc_exposed_filters'][$filter_key]['#title'] = $form_info['label'];
      $form['bhcc_exposed_filters'][$filter_key]['#description'] = $form_info['description'];
    }
  }

  // Add the autosubmit js.
  $form['#attached']['library'][] = 'bhcc_events_plus/facet_auto_submit';

  // If proximity filter exists.
  if (!empty($form['bhcc_exposed_filters']['proximity_wrapper']['proximity'])) {

    $form['bhcc_exposed_filters']['proximity'] = $form['bhcc_exposed_filters']['proximity_wrapper']['proximity'];
    $title = $form['bhcc_exposed_filters']['proximity_wrapper']['#title'];
    unset($form['bhcc_exposed_filters']['proximity_wrapper']);

    // Set as a container, not a fieldset.
    $form['bhcc_exposed_filters']['proximity']['#type'] = 'container';

    // Hide the distance filter.
    // Should be ok to unset completley as assumed by view if not present.
    unset($form['bhcc_exposed_filters']['proximity']['value']);

    // Remove the description and summary.
    unset($form['bhcc_exposed_filters']['proximity']['source_configuration']['origin_address']['#description']);
    unset($form['bhcc_exposed_filters']['proximity']['exposed_summary']);

    // Change the field title to the set title in views.
    $form['bhcc_exposed_filters']['proximity']['source_configuration']['origin_address']['#title'] = $title;

    // Set the weights.
    $form['bhcc_exposed_filters']['proximity']['#weight'] = -40;
    if (!empty($form['bhcc_exposed_filters']['search'])) {
      $form['bhcc_exposed_filters']['search']['#weight'] = -50;
    }
  }

  // Move the cost filter to the bottom.
  if (!empty($form['bhcc_exposed_filters']['bhcc_cost_value'])) {
    $form['bhcc_exposed_filters']['bhcc_cost_value']['#weight'] = 100;
  }

  // Fix hide the reset button if no filters selected (incl facets).
  $view = $form_state->get('view');
  $exposed_input = $view->getExposedInput();
  if (empty($exposed_input['bhcc_localgov_facets'])) {
    unset($exposed_input['bhcc_localgov_facets']);
  }
  if (!empty($exposed_input['start']) && $exposed_input['start'] == date('Y-m-d')) {
    unset($exposed_input['start']);
  }
  if (empty($exposed_input)) {
    unset($form['bhcc_exposed_filters']['actions']['reset']);
  }

  return $form;
}

/**
 * Hide the facets filter
 * 
 * As we can't fully remove the facet filters, at least hide it so the block
 * does not appear when not needed.
 * 
 * @param array $form
 *   Form array.
 */
function _bhcc_events_plus_localgov_events_listing_hide_facets(&$form) {
  // Remove facets if no channel node.
  $form['bhcc_facets'] = array_filter($form['bhcc_facets'], function($key) {
    return (strpos($key, 'facet_') !== 0 ? TRUE : FALSE);
  }, ARRAY_FILTER_USE_KEY);
  unset($form['bhcc_facets']['#theme']);
  $form['bhcc_facets']['#type'] = 'hidden';
}
